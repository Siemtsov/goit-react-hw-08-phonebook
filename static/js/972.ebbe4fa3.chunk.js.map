{"version":3,"file":"static/js/972.ebbe4fa3.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/container.tsx","pages/Home.jsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import { Container, Heading, Text } from '@chakra-ui/react';\nimport {\n  Link as ReactRouterLink,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport { Link as ChakraLink } from '@chakra-ui/react';\nimport { useEffect } from 'react';\nimport { selectIsLogIn, selectUser } from 'ReduxToolkit/auth/selectors';\nimport { useSelector } from 'react-redux';\n\nconst Home = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const isLogIn = useSelector(selectIsLogIn);\n  const userName = useSelector(selectUser).name;\n\n  useEffect(() => {\n    if (location.pathname !== '/') navigate('/');\n  }, [location, navigate]);\n\n  return (\n    <Container p={6}>\n      {!isLogIn ? (\n        <>\n          <Heading mb={6}>Hello! Use me for your contacts list)))</Heading>\n          <Text fontSize=\"2xl\">\n            <ChakraLink\n              as={ReactRouterLink}\n              to=\"/login\"\n              fontWeight={700}\n              textDecoration=\"underline\"\n              _hover={{ fontWeight: 700, color: 'teal' }}\n            >\n              Log in\n            </ChakraLink>{' '}\n            if you already have an account or\n            <ChakraLink\n              as={ReactRouterLink}\n              to=\"/register\"\n              fontWeight={700}\n              textDecoration=\"underline\"\n              _hover={{ fontWeight: 700, color: 'teal' }}\n            >\n              {' '}\n              register\n            </ChakraLink>{' '}\n            if you don't\n          </Text>\n        </>\n      ) : (\n        <>\n          <Heading mb={6}>Hello, {userName}! How are you doing?)))</Heading>\n          <Text fontSize=\"2xl\">\n            {' '}\n            Your contacts are\n            <ChakraLink\n              as={ReactRouterLink}\n              to=\"/contacts\"\n              fontWeight={700}\n              textDecoration=\"underline\"\n              _hover={{ fontWeight: 700, color: 'teal' }}\n              ml={1}\n            >\n              HERE\n            </ChakraLink>\n          </Text>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Home;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["Container","forwardRef","props","ref","omitThemingProps","className","centerContent","rest","styles","useStyleConfig","chakra","div","cx","__css","display","flexDirection","alignItems","displayName","location","useLocation","navigate","useNavigate","isLogIn","useSelector","selectIsLogIn","userName","selectUser","name","useEffect","pathname","_jsx","p","children","_jsxs","_Fragment","Heading","mb","Text","fontSize","ChakraLink","as","ReactRouterLink","to","fontWeight","textDecoration","_hover","color","ml","align","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textTransform","h2"],"sourceRoot":""}